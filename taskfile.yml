version: '3'

env:
  PHP_BIN: '{{.PHP_BIN | default "$(which php)"}}'
  NODE_BIN: '{{.NODE_BIN | default "$(which node)"}}'
  PNPM_BIN: '{{.PNPM_BIN | default "$(which pnpm)"}}'
  COMPOSER_BIN: '{{.COMPOSER_BIN | default "$(which composer)"}}'

vars:
  CONFIG_DIR: '{{.TASKFILE_DIR}}/config'
  NODEJS_BIN_DIR: '{{.TASKFILE_DIR}}/node_modules/.bin'
  COMPOSER_BIN_DIR: '{{.TASKFILE_DIR}}/vendor/bin'

tasks:
  default:
    cmd: 'task --list-all'

  composer:
    label: 'Composer'
    desc: 'Runs `composer` command.'
    internal: true
    cmd: '{{.PHP_BIN}} {{.COMPOSER_BIN}} {{.CLI_ARGS}}'

  drush:
    label: 'Drush'
    desc: 'Runs `drush` command.'
    requires:
      vars:
        - COMPOSER_BIN_DIR
    cmd: '{{.PHP_BIN}} {{.COMPOSER_BIN_DIR}}/drush {{.CLI_ARGS}}'

  phpstorm-meta:
    label: 'PHPStorm metadata'
    desc: 'Generates PHPStorm metadata.'
    cmds:
      - task: drush
        vars: { CLI_ARGS: 'generate -y phpstorm-meta' }

  phpcs:
    label: 'PHPCS'
    desc: 'Runs `phpcs` command.'
    cmd: '{{.PHP_BIN}} {{.COMPOSER_BIN_DIR}}/phpcs -ps --colors --standard={{.CONFIG_DIR}}/phpcs.xml {{.CLI_ARGS}}'

  phpcbf:
    label: 'PHPCBF'
    desc: 'Runs `phpcbf` command.'
    cmd: '{{.PHP_BIN}} {{.COMPOSER_BIN_DIR}}/phpcbf -ps --colors --standard={{.CONFIG_DIR}}/phpcs.xml {{.CLI_ARGS}}'

  phpstan:
    label: 'PHPStan'
    desc: 'Runs `phpstan` command.'
    cmd: '{{.PHP_BIN}} {{.COMPOSER_BIN_DIR}}/phpstan --configuration={{.CONFIG_DIR}}/phpstan.neon {{.CLI_ARGS}}'

  twigcs:
    label: 'TWIGCS'
    desc: 'Runs `twig-cs-fixer` command.'
    cmd: '{{.PHP_BIN}} {{.COMPOSER_BIN_DIR}}/twig-cs-fixer lint --config={{.CONFIG_DIR}}/.twig-cs-fixer.php ./app/Drupal --ansi {{.CLI_ARGS}}'

  pnpm:
    label: 'pnpm'
    desc: 'Runs `pnpm` command.'
    internal: true
    cmd: '{{.PNPM_BIN}} {{.CLI_ARGS}}'

  eslint:
    label: 'ESLint'
    desc: 'Runs `eslint` command.'
    cmd: '{{.NODEJS_BIN_DIR}}/eslint {{.CLI_ARGS}}'

  stylelint:
    label: 'Stylelint'
    desc: 'Runs `stylelint` command.'
    cmd: '{{.NODEJS_BIN_DIR}}/stylelint -c {{.CONFIG_DIR}}/.stylelintrc.json {{.CLI_ARGS}}'

  cspell:
    label: 'CSPell'
    desc: 'Runs `cspell` command.'
    cmd: '{{.NODEJS_BIN_DIR}}/cspell {{.CLI_ARGS}}'

  prettier:
    label: 'Prettier'
    desc: 'Runs `prettier` command.'
    cmd: '{{.NODEJS_BIN_DIR}}/prettier {{.CLI_ARGS}} --config={{.CONFIG_DIR}}/.prettierrc.json --ignore-path={{.CONFIG_DIR}}/.prettierignore'

  rector:
    label: 'Rector'
    desc: 'Runs `rector` command.'
    cmd: '{{.PHP_BIN}} {{.COMPOSER_BIN_DIR}}/rector process --config={{.CONFIG_DIR}}/rector.php app --ansi {{.CLI_ARGS}}'

  install:
    desc: 'Install website.'
    summary: 'Installs a website with a demo content for development and testing.'
    prompt: |
      This command will delete current database and install a fresh website.
      All unsaved data will be permanently lost.
      Are you sure?
    cmds:
      - task: composer
        vars: { CLI_ARGS: 'install' }
      - task: drush
        vars: { CLI_ARGS: 'site:install -y --existing-config' }
      # - task: drush
      #   vars: {CLI_ARGS: 'pm:install nts_dev -y'}
      - task: drush
        vars: { CLI_ARGS: 'deploy:mark-complete -y' }
      - task: phpstorm-meta
      - task: drush
        vars: { CLI_ARGS: 'user:login --uid=1' }

  lint:
    label: 'Project lint'
    desc: 'Validates project files.'
    cmds:
      - task: lint:composer
      - task: lint:phpcs
      - task: lint:phpstan
      - task: lint:spellcheck
      - task: lint:js
      - task: lint:css
      - task: lint:yml
      - task: lint:twig
      - task: lint:prettier

  lint:composer:
    label: 'Composer validation'
    desc: 'Validates composer.json file and checks platform requirements.'
    cmds:
      - task: composer
        vars: { CLI_ARGS: 'validate --strict --ansi' }
      - task: composer
        vars: { CLI_ARGS: 'check-platform-req --ansi' }

  lint:phpcs:
    label: 'PHPCS validation'
    desc: 'Validate PHP for code style.'
    cmds:
      - task: phpcs

  lint:phpstan:
    label: 'PHPStan analyze'
    desc: 'Analyze PHP code for bugs and errors.'
    cmds:
      - task: phpstan
        vars: { CLI_ARGS: 'analyze' }

  lint:js:
    label: 'JavaScript linter'
    desc: 'Lints JavaScript files.'
    aliases:
      - jslint
    cmds:
      - task: eslint
        vars: { CLI_ARGS: '-c {{.CONFIG_DIR}}/.eslintrc.json {{.CLI_ARGS}}' }

  lint:css:
    label: 'CSS linter'
    desc: 'Lints CSS files.'
    aliases:
      - csslint
      - lint:style
    cmds:
      - task: stylelint
        vars: { CLI_ARGS: 'app/**/*.css {{.CLI_ARGS}}' }

  lint:yml:
    label: 'YML linter'
    desc: 'Lints Y(A)ML files.'
    aliases:
      - ymllint
      - yamllint
      - lint:yaml
    cmds:
      - task: eslint
        vars: { CLI_ARGS: '-c {{.CONFIG_DIR}}/.eslintrc.json --ext .yml --ext .yaml {{.CLI_ARGS}}' }

  lint:twig:
    label: 'Twig linter'
    desc: 'Lints TWIG files.'
    aliases:
      - twiglint
    cmds:
      - task: twigcs
        vars: { CLI_ARGS: '{{.CLI_ARGS}}' }

  lint:spellcheck:
    label: 'Spellcheck'
    desc: 'Checks for common spelling issues.'
    aliases:
      - spellcheck
    cmds:
      - task: cspell
        vars: { CLI_ARGS: '--config {{.CONFIG_DIR}}/.cspell.json --no-progress "**" {{.CLI_ARGS}}' }

  lint:prettier:
    label: 'Prettier'
    desc: 'Checks for common format issues with prettier.'
    aliases:
      - format
      - lint:format
    cmds:
      - task: prettier
        vars: { CLI_ARGS: '-c app' }

  lint:rector:
    label: 'Rector check'
    desc: 'Check Rector issues.'
    cmds:
      - task: rector
        vars: { CLI_ARGS: '--dry-run' }

  fix:
    label: 'Fixing found issues'
    desc: 'Trying for automated fixes for found problems.'
    cmds:
      - task: fix:phpcs
      - task: fix:js
      - task: fix:css
      - task: fix:yml
      - task: fix:twig
      - task: fix:prettier

  fix:phpcs:
    label: 'PHPCS'
    desc: 'Fix PHPCS issues.'
    cmds:
      - task: phpcbf

  fix:js:
    label: 'JavaScript'
    desc: 'Fix JavaScript issues.'
    cmds:
      - task: lint:js
        vars: { CLI_ARGS: '--fix' }

  fix:css:
    label: 'CSS'
    desc: 'Fix CSS issues.'
    cmds:
      - task: lint:css
        vars: { CLI_ARGS: '--fix' }

  fix:yml:
    label: 'Y(A)ML'
    desc: 'Fix Y(A)ML issues.'
    aliases:
      - fix:yaml
    cmds:
      - task: lint:yml
        vars: { CLI_ARGS: '--fix' }

  fix:twig:
    label: 'TWIG'
    desc: 'Fix TWIG issues.'
    cmds:
      - task: lint:twig
        vars: { CLI_ARGS: '--fix' }

  fix:prettier:
    label: 'Prettier'
    desc: 'Fix TWIG issues.'
    aliases:
      - fix:format
    cmds:
      - task: prettier
        vars: { CLI_ARGS: '-wl app' }

  fix:rector:
    label: 'Rector'
    desc: 'Fix Rector issues.'
    cmds:
      - task: rector

  build-dictionary:
    label: 'Builds dictionary'
    desc: 'Builds a project dictionary for CSPell.'
    cmds:
      - task: cspell
        vars: { CLI_ARGS: '--config {{.CONFIG_DIR}}/.cspell.json --words-only --unique "**" | sort -f > {{.CONFIG_DIR}}/cspell/dictionary.dic' }
