version: '3'

env:
  PHP_BIN: '{{.PHP_BIN | default "$(which php)"}}'
  NODE_BIN: '{{.NODE_BIN | default "$(which node)"}}'
  PNPM_BIN: '{{.PNPM_BIN | default "$(which pnpm)"}}'
  COMPOSER_BIN: '{{.COMPOSER_BIN | default "$(which composer)"}}'

vars:
  CONFIG_DIR: '{{.TASKFILE_DIR}}/config'
  NODEJS_BIN_DIR: '{{.TASKFILE_DIR}}/node_modules/.bin'
  COMPOSER_BIN_DIR: '{{.TASKFILE_DIR}}/vendor/bin'

tasks:
  default:
    cmd: 'task --list-all'

  composer:
    label: 'Composer'
    desc: 'Runs `composer` command.'
    internal: true
    cmd: '{{.PHP_BIN}} {{.COMPOSER_BIN}} {{.CLI_ARGS}}'

  drush:
    label: 'Drush'
    desc: 'Runs `drush` command.'
    requires:
      vars:
        - COMPOSER_BIN_DIR
    cmd: '{{.PHP_BIN}} {{.COMPOSER_BIN_DIR}}/drush {{.CLI_ARGS}}'

  phpstorm-meta:
    label: 'PHPStorm metadata'
    desc: 'Generates PHPStorm metadata.'
    cmds:
      - task: drush
        vars: { CLI_ARGS: 'generate -y phpstorm-meta' }

  phpcs:
    label: 'PHPCS'
    desc: 'Runs `phpcs` command.'
    cmd: '{{.PHP_BIN}} {{.COMPOSER_BIN_DIR}}/phpcs -ps --colors --standard={{.CONFIG_DIR}}/phpcs.xml {{.CLI_ARGS}}'

  phpcbf:
    label: 'PHPCBF'
    desc: 'Runs `phpcbf` command.'
    cmd: '{{.PHP_BIN}} {{.COMPOSER_BIN_DIR}}/phpcbf -ps --colors --standard={{.CONFIG_DIR}}/phpcs.xml {{.CLI_ARGS}}'

  phpstan:
    label: 'PHPStan'
    desc: 'Runs `phpstan` command.'
    cmd: '{{.PHP_BIN}} {{.COMPOSER_BIN_DIR}}/phpstan --configuration={{.CONFIG_DIR}}/phpstan.neon {{.CLI_ARGS}}'

  pnpm:
    label: 'pnpm'
    desc: 'Runs `pnmp` command.'
    internal: true
    cmd: '{{.PNPM_BIN}} {{.CLI_ARGS}}'

  eslint:
    label: 'ESLint'
    desc: 'Runs `eslint` command.'
    cmd: '{{.NODEJS_BIN_DIR}}/eslint {{.CLI_ARGS}}'

  stylelint:
    label: 'Stylelint'
    desc: 'Runs `stylelint` command.'
    cmd: '{{.NODEJS_BIN_DIR}}/stylelint {{.CLI_ARGS}}'

  cspell:
    label: 'CSPell'
    desc: 'Runs `cspell` command.'
    cmd: '{{.NODEJS_BIN_DIR}}/cspell {{.CLI_ARGS}}'

  install:
    desc: 'Install website.'
    summary: 'Installs a website with a demo content for development and testing.'
    prompt: |
      This command will delete current database and install a fresh website.
      All unsaved data will be permanently lost.
      Are you sure?
    cmds:
      - task: composer
        vars: { CLI_ARGS: 'install' }
      - task: drush
        vars: { CLI_ARGS: 'site:install -y --existing-config' }
#      - task: drush
#        vars: {CLI_ARGS: 'pm:install nts_dev -y'}
      - task: drush
        vars: { CLI_ARGS: 'deploy:mark-complete -y' }
      - task: phpstorm-meta
      - task: drush
        vars: { CLI_ARGS: 'user:login --uid=1' }

  lint:
    label: 'Project lint'
    desc: 'Validates project files.'
    cmds:
#      - task: lint/composer
      - task: lint/phpcs
      - task: lint/phpstan
      - task: lint/js
      - task: lint/css
      - task: lint/spellcheck
      - task: lint/yml

  lint/composer:
    label: 'Composer validation'
    desc: 'Validates composer.json file and checks platform requirements.'
    cmds:
      - task: composer
        vars: { CLI_ARGS: 'validate --strict' }
      - task: composer
        vars: { CLI_ARGS: 'check-platform-req' }

  lint/phpcs:
    label: PHPCS validation
    desc: Validate PHP for code style.
    cmds:
      - task: phpcs

  lint/phpstan:
    label: PHPStan analyze
    desc: Analyze PHP code for bugs and errors.
    cmds:
      - task: phpstan
        vars: { CLI_ARGS: 'analyze' }

  lint/js:
    label: 'JavaScript linter'
    desc: 'Lints JavaScript files.'
    aliases:
      - jslint
    cmds:
      - task: eslint
        vars: { CLI_ARGS: '-c {{.CONFIG_DIR}}/.eslintrc.json {{.CLI_ARGS}}' }

  lint/css:
    label: 'CSS linter'
    desc: 'Lints CSS files.'
    aliases:
      - 'csslint'
    cmds:
      - task: stylelint
        vars: { CLI_ARGS: 'app/**/*.css {{.CLI_ARGS}}' }

  lint/yml:
    label: 'YML linter'
    desc: 'Lints Y(A)ML files.'
    aliases:
      - ymllint
      - yamllint
      - lint:yml
      - lint:yaml
    cmds:
      - task: eslint
        vars: { CLI_ARGS: '-c {{.CONFIG_DIR}}/.eslintrc.json --ext .yml --ext .yaml {{.CLI_ARGS}}' }

  lint/spellcheck:
    label: Spellcheck
    desc: Checks for common spelling issues.
    aliases:
      - 'spellcheck'
    cmds:
      - task: cspell
        vars: { CLI_ARGS: '--config {{.CONFIG_DIR}}/.cspell.json --no-progress "**" {{.CLI_ARGS}}' }

  fix:
    label: Fixing found issues
    desc: Trying for automated fixes for found problems.
    cmds:
      - task: fix/phpcs
      - task: fix/js
      - task: fix/css
      - task: fix/yml

  fix/phpcs:
    label: PHPCS
    desc: Fix PHPCS issues.
    cmds:
      - task: phpcbf

  fix/js:
    label: JavaScript
    desc: Fix JavaScript issues.
    cmds:
      - task: validate/js
        vars: { CLI_ARGS: '--fix' }

  fix/css:
    label: 'CSS'
    desc: 'Fix CSS issues.'
    cmds:
      - task: validate/css
        vars: { CLI_ARGS: '--fix' }

  fix/yml:
    label: 'Y(A)ML'
    desc: 'Fix Y(A)ML issues.'
    aliases:
      - fix/yaml
      - fix:yml
    cmds:
      - task: validate/yml
        vars: { CLI_ARGS: '--fix' }

  build-dictionary:
    label: 'Builds dictionary'
    desc: 'Builds a project dictionary for CSPell.'
    cmds:
      - task: cspell
        vars: { CLI_ARGS: '--config {{.CONFIG_DIR}}/.cspell.json --words-only --unique "**" | sort -f > {{.CONFIG_DIR}}/cspell/dictionary.dic' }
